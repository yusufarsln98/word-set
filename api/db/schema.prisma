datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

enum Language {
  EN
  TR
  ES
  DE
}

enum Role {
  ADMIN
  PREMIUM_USER
  USER
}

enum Gender {
  MALE
  FEMALE
  RATHER_NOT_SAY
  COSTUM
}

enum Theme {
  LIGHT
  DARK
}

// -------- User --------
model Avatar {
  id      Int     @id @default(autoincrement())
  data    String  // Base64 Encoded Image
  userConfig UserConfig[]
}

model User {
  id                  Int         @id @default(autoincrement())
  name                String

  username            String      @unique
  email               String      @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  role                Role        @default(USER)
  createdAt           DateTime    @default(now())
  daysStudied         DateTime[]

  userConfig          UserConfig?

  folders             Folder[]
  sets                Set[]
}

model UserConfig {
  id                  Int         @id @default(autoincrement())

  avatar              Avatar      @relation(fields: [avatarId], references: [id])
  avatarId            Int         // from start, this will be assigned randomly by server
  birthday            DateTime?
  gender              Gender?
  theme               Theme       @default(LIGHT)
  languageNative      Language
  languageLearning    Language

  user                User        @relation(fields: [userId], references: [id])
  userId              Int         @unique
}

// Folder, Set, and Word
model Folder {
  id              Int         @id @default(autoincrement())

  title           String
  description     String
  creatorId       Int         // Folder can be created or copied by other users - this is for credit

  user            User        @relation(fields: [userId], references: [id])
  userId          Int

  sets            Set[]
}

model Set {
  id                    Int         @id @default(autoincrement())

  title                 String
  description           String
  creatorId             Int         // Sets can be created or copied by other users - this is for credit

  user                  User        @relation(fields: [userId], references: [id])
  userId                Int

  folder                Folder?     @relation(fields: [folderId], references: [id])
  folderId              Int?

  termsLanguage         Language
  translationsLanguage  Language

  flashCards            FlashCard[]
}

//  -------- Word --------
//  User can search a word by specifying the term and translation language
model Word {
  id                    Int         @id @default(autoincrement())
  term                  String
  // Term search is an unique field to find the word in constant time
  // It is combination of term and termsLanguage and translationsLanguage
  // For example, if term is "hello", termsLanguage is EN, and translationsLanguage is TR
  // termSearch will be "hello-EN-TR"
  termSearch            String      @unique

  termsLanguage         Language
  translationsLanguage  Language

  flashCards            FlashCard[]
}

model FlashCard {
  id                  Int         @id @default(autoincrement())
  term                String
  translation         String
  definition          String
  example             String

  word                Word        @relation(fields: [wordId], references: [id])
  wordId              Int

  set                 Set         @relation(fields: [setId], references: [id])
  setId               Int
}
