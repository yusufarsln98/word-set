datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

enum Language {
  English
  French
  Turkish
  Spanish
  German
  Italian
  Portuguese
  Japanese
}

enum Role {
  ADMIN
  PREMIUM_USER
  USER
}

enum Gender {
  MALE
  FEMALE
  RATHER_NOT_SAY
  COSTUM
}

enum Theme {
  LIGHT
  DARK
}

// -------- User --------
model Avatar {
  id          Int     @id @default(autoincrement())
  data        String  // Base64 Encoded Image
  userConfig  UserConfig[] // Hide this field from client
}

model User {
  id                  Int         @id @default(autoincrement())
  name                String

  username            String      @unique
  email               String      @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  roles               Role[]      @default([USER])
  createdAt           DateTime    @default(now())
  daysStudied         DateTime[]

  userConfig          UserConfig?

  dictionary          Dictionary @relation(fields: [dictionaryId], references: [id])
  dictionaryId        Int        @default(1)

  folders             Folder[]
  sets                Set[]
}

model UserConfig {
  id                  Int         @id @default(autoincrement())

  avatar              Avatar?     @relation(fields: [avatarId], references: [id])
  avatarId            Int?
  defaultAvatarIndex  Int         @default(0)
  birthday            DateTime?
  gender              Gender?
  theme               Theme       @default(LIGHT)
  languageNative      Language
  languageLearning    Language

  user                User        @relation(fields: [userId], references: [id])
  userId              Int         @unique
}

// Folder, Set, and Word
model Folder {
  id              Int         @id @default(autoincrement())

  title           String
  description     String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user            User        @relation(fields: [userId], references: [id])
  userId          Int

  sets            Set[]
}

model Set {
  // Either folder or user must has set
  id                    Int         @id @default(autoincrement())

  title                 String
  description           String
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  termsLanguage         Language
  translationsLanguage  Language

  folder                Folder?     @relation(fields: [folderId], references: [id])
  folderId              Int?

  user                  User       @relation(fields: [userId], references: [id])
  userId                Int

  flashCards            FlashCard[]
}

model FlashCard {
  id                  Int         @id @default(autoincrement())

  word                Word         @relation(fields: [wordId], references: [id])
  wordId              Int
  meaningIndex        Int          @default(0)

  boost               Float       @default(1)

  set                 Set         @relation(fields: [setId], references: [id])
  setId               Int
}


model Dictionary {
  id                    Int         @id @default(autoincrement())
  name                  String      @unique // combination of termsLanguage and translationsLanguage (e.g. "English-Turkish")
  termsLanguage         Language
  translationsLanguage  Language
  words                 Word[]
  users                 User[]
}

//  -------- Word --------
//  User can search a word by specifying the term and translation language
model Word {
  id                    Int         @id @default(autoincrement())
  term                  String
  search                String      @unique // combination of term and dictionary name (e.g. "hello-English-Turkish")
  dictionary            Dictionary  @relation(fields: [dictionaryId], references: [id])
  dictionaryId          Int
  meanings              Meaning[]
  flashCards            FlashCard[]
}

model Meaning {
  id                  Int         @id @default(autoincrement())

  definition          String
  example             String
  cefrLevel           String
  partOfSpeech        String
  translation         String

  word                Word        @relation(fields: [wordId], references: [id])
  wordId              Int
}

